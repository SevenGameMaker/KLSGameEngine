// parse this file only once
#pragma once

// simple mode enums to control program flow
enum KLS_API KLS_MODE { KLS_MODE_INIT, KLS_MODE_RUN, KLS_MODE_PAUSE, KLS_MODE_RESUME, KLS_MODE_QUIT };
extern KLS_API std::string KLS_MODE_TEXT[];

// driver types
enum KLS_API KLS_DRIVER_TYPE { KLSDT_NONE, KLSDT_OPENGL };

// shader data types
enum class ShaderDataType { None = 0, Float, Float2, Float3, Float4, Mat3, Mat4 };

// built in vertex types (but user can add their own at will)
enum KLS_API KLS_VERTEX_TYPE { KLSVT_NONE, KLSVT2D, KLSVT3D, KLSVT3D_ANIM, KLSVT_PARTICLE, KLSVT_INSTANCED };

// driver clear flags
enum KLS_API KLS_CLEARFLAG { KLSCF_COLOR = 0x00000001, KLSCF_DEPTH = 0x00000010, KLSCF_STENCIL = 0x00000100, KLSCF_ALL = 0xffff };

enum KLS_API KLS_VSYNC_FLAGS { KLSVS_NONE, KLSVS_UNLIMITED, KLSVS_LIMITED, KLSVS_PROTECTED };
extern KLS_API std::string KLS_VSYNC_FLAGS_TEXT[];

// primitive types
enum KLS_API KLS_PRIMITIVE_TYPE { KLS_PT_POINT, KLS_PT_TRIANGLE, KLS_PT_TRIANGLE_STRIP, KLS_PT_LINES, KLS_PT_INSTANCED };

// texture formats
enum KLS_TextureFormat { KLSTF_NONE, KLSTF_RG16F, KLSTF_RGB, KLSTF_RGBA, KLSTF_DEPTH, KLSTF_RGBA32F, RED_INTEGER };

// shader type
enum KLS_SHADER_TYPE { KLSST_VERTEX, KLSST_PIXEL, KLSST_GEOM };

enum KLS_MATERIAL_TYPE
{
	KLSMT_NONE, KLSMT_UV, KLSMT_NORMALS, KLSMT_SKYBOX, KLSMT_TEXTURED, KLSMT_TERRAIN,
	KLSMT_FSQUAD, KLSMT_ANIMATEDMESH, KLSMT_COLOR, KLSMT_PARTICLES, KLSMT_SUN,
	KLSMT_INSTANCED, KLSMT_BUMPMAP, KLSMT_INFINITEPLANE,
	KLSMT_2DGREYSCALE, KLSMT_2DINVERTED, KLS_MT_COUNT
};

extern KLS_API std::string KLS_MATERIAL_TYPE_TEXT[];

//! enumeration for key actions. Used for example in the FPS Camera.
enum KLS_ACTION
{
	KLS_MOVE_FORWARD = 0,
	KLS_MOVE_BACKWARD,
	KLS_MOVE_STRAFELEFT,
	KLS_MOVE_STRAFERIGHT,
	KLS_MOVE_RUN,
	KLS_MOVE_CROUCH,
	KLS_MOVE_TURNLEFT,
	KLS_MOVE_TURNRIGHT,
	KLS_MOVE_JUMP,
	KLS_MOVE_FIGHT,
	KLS_MOVE_FIRE,
	KLS_MOVE_CAST,
	KLS_COUNT,
};

enum KLS_API KLS_CAMERASTYLE { KLCS_CAMERA, KLSCS_FPS };

// scenenode types for scenemanager registration
enum KLS_SCENENODE_TYPE { KLSSN_CAMERA, KLSSN_SOLID, KLSSN_TRANSPARENT, KLSSN_SKYBOX, KLSSN_WATER, KLSSN_LIGHT };

enum KLS_OBJECT_TYPE { KLSOT_NONE, KLSOT_OBJECT, KLSOT_SKYBOX, KLSOT_LIGHT, KLSOT_CAMERA };

// GLFW_CURSOR_HIDDEN
enum KLS_CURSOR_TYPE
{
	KLSCT_NORMAL = 0x00034001,
	KLSCT_HIDDEN = 0x00034002,
	KLSCT_DISABLED = 0x00034003,
	KLSCT_ARROW = 0x00036001,
	KLSCT_IBEAM = 0x00036002,
	KLSCT_CROSSHAIR = 0x00036003,
	KLSCT_HAND = 0x00036004,
	KLSCT_VRESIZE = 0x00036005,
	KLSCT_HRESIZE = 0x00036006
};

// physx object typews for creation
enum KLS_PHYSX_TYPE { POT_NONE = 0, POT_CUBE, POT_SPHERE, POT_TREE, POT_COUNT };
extern KLS_API std::string KLS_PHYSXTYPE_TEXT[];


